#!/usr/bin/env perl

#****************************************************************************
#*   check_elasticsearch                                                    *
#*   Checks the json output of a elasticsearch node's api for its status    *
#*                                                                          *
#*   Copyright (C) 2013 by Jeremy Falling except where noted.               *
#*                                                                          *
#*   This program is free software: you can redistribute it and/or modify   *
#*   it under the terms of the GNU General Public License as published by   *
#*   the Free Software Foundation, either version 3 of the License, or      *
#*   (at your option) any later version.                                    *
#*                                                                          *
#*   This program is distributed in the hope that it will be useful,        *
#*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
#*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
#*   GNU General Public License for more details.                           *
#*                                                                          *
#*   You should have received a copy of the GNU General Public License      *
#*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
#****************************************************************************

use strict;
use warnings;
use WWW::Mechanize;
use JSON;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

#nagios/icinga exit codes
my $STATE_OK = 0;
my $STATE_WARNING = 1;
my $STATE_CRITICAL = 2;
my $STATE_UNKNOWN = 3;

my $man = 0;
my $help = 0;
my $protocol = "http";
my $port = "9200";
my $userPass = "";
my $status = 0;

use vars qw($jsonData $userPass @statusMessage $opt_https $opt_port $opt_node $opt_user $opt_pass $opt_minDataNodes $opt_minActiveShards $opt_maxUnassignedShards $opt_minActivePrimaryShards $opt_minNodes $opt_maxInitializingShards $opt_minNonDataNodes );


Getopt::Long::Configure('bundling');
GetOptions
	('h|help|?' => \$help, man => \$man,
	 "minn=s" => \$opt_minNodes,
	 "mindn=s" => \$opt_minDataNodes,
	 "minndn=s" => \$opt_minNonDataNodes,
	 "minaps=s" => \$opt_minActivePrimaryShards,
	 "minas=s" => \$opt_minActiveShards,
	 "maxus=s" => \$opt_maxUnassignedShards,
	 "maxis=s" => \$opt_maxInitializingShards,
	 "https"  => \$opt_https,
	 "port=s" => \$opt_port,
	 "node=s" => \$opt_node,
	 "user=s" => \$opt_user,
	 "pass=s" => \$opt_pass) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;

unless ($opt_node){print "Node not specified, perhaps see --help?\n"; exit 3};


if ($opt_https){$protocol = "https"};
if ($opt_port){$port = $opt_port};
if ($opt_user || $opt_pass){$userPass = "$opt_user:$opt_pass@";}


#http/s,user:pass,port
my $url="$protocol://$userPass$opt_node:$port/_cluster/health?pretty=true";


my $mech = WWW::Mechanize->new(autocheck => 0);
my $res = $mech -> get($url);


unless($res->is_success()){
	my $error = $mech->res->content;
	print "ERROR: could not connect to url: $error\n";
	exit 2;
}

#put the json data into a hash
$jsonData = decode_json($mech->content);

if ($jsonData->{'status'} eq "green") {push (@statusMessage,  "Cluster is green")}
elsif ($jsonData->{'status'} eq "yellow") {push (@statusMessage,  "Cluster is yellow");processStatus($STATE_WARNING)}
elsif ($jsonData->{'status'} eq "red") {push (@statusMessage,  "Cluster is red");processStatus($STATE_CRITICAL)}
else {push (@statusMessage,  "ERROR: unknown cluster state")}

#run checks
if ($opt_minNodes){processData("$opt_minNodes", "$jsonData->{'number_of_nodes'}", "<", "$jsonData->{'number_of_nodes'} of a minimum of $opt_minNodes nodes found")}
if ($opt_minDataNodes){processData("$opt_minDataNodes", "$jsonData->{'number_of_data_nodes'}", "<", "$jsonData->{'number_of_data_nodes'} of a minimum of $opt_minDataNodes data nodes found")}
if ($opt_minNonDataNodes){my $nonDataNodes = $jsonData->{'number_of_nodes'} - $jsonData->{'number_of_data_nodes'}; processData("$opt_minNonDataNodes", "$nonDataNodes", "<", "$nonDataNodes of a minimum of $opt_minNonDataNodes non data nodes found")}
if ($opt_minActivePrimaryShards){processData("$opt_minActivePrimaryShards", "$jsonData->{'active_primary_shards'}", "<", "$jsonData->{'active_primary_shards'} of a minimum of $opt_minActivePrimaryShards active primary shards found")}
if ($opt_minActiveShards){processData("$opt_minActiveShards", "$jsonData->{'active_shards'}", "<", "$jsonData->{'active_shards'} of a minimum of $opt_minActiveShards active shards found")}
if ($opt_maxUnassignedShards){processData("$opt_maxUnassignedShards", "$jsonData->{'unassigned_shards'}", ">", "$jsonData->{'unassigned_shards'} of a maximum of $opt_maxUnassignedShards unassigned shards found")}
if ($opt_maxInitializingShards){processData("$opt_maxInitializingShards", "$jsonData->{'initializing_shards'}", "<", "$jsonData->{'initializing_shards'} of a minimum of $opt_maxInitializingShards initilizing shards found")}


#give status as message and exit with correct code
print join("\n", @statusMessage);
exit $status;



#functions

sub processData {
    # Get data passed to function
    my ($threshold, $esHashItem, $operator, $errorMessage) = @_;

	#check if range or single value was given
	if ($threshold =~ /:/){
		my @thresholdValues = split(':', $threshold);
		
		
		if ($operator eq "<") {	
			if ($thresholdValues[0] > $thresholdValues[1]){print "Error: warning value cannot be greater then critical value\n"; exit $STATE_UNKNOWN}
		
			if ("$esHashItem" < $thresholdValues[1]) {
				push (@statusMessage,  "$errorMessage");
				processStatus($STATE_CRITICAL);
			}
			elsif("$esHashItem" < $thresholdValues[0]) {
				push (@statusMessage,  "$errorMessage");
				processStatus($STATE_WARNING);
			}
		}
		elsif ($operator eq ">") {	
			if ($thresholdValues[0] < $thresholdValues[1]){print "Error: warning value cannot be less then critical value\n"; exit $STATE_UNKNOWN }

			if ("$esHashItem" > $thresholdValues[1]) {
				push (@statusMessage,  "$errorMessage");
				processStatus($STATE_CRITICAL);
			}
			elsif("$esHashItem" > $thresholdValues[0]) {
				push (@statusMessage,  "$errorMessage");
				processStatus($STATE_WARNING);
			}
		}
		
		else {
			die "Unknown operator $operator";
		}
		
	}
	#range was not given
	else {
		if ($operator eq "<") {		
			if ("$esHashItem" < $threshold) {
				push (@statusMessage,  "$errorMessage");
				processStatus($STATE_CRITICAL);
			}
		}
		elsif ($operator eq ">") {	
			if ("$esHashItem" > $threshold) {
				push (@statusMessage,  "$errorMessage");
				processStatus($STATE_CRITICAL);
			}
		}
		else {
			die "Unknown operator $operator";
		}
		
	}

}

#checks if latest status is worse then the previous one
sub processStatus {
	my ($newStatus) = @_;
	if ($newStatus > $status){$status = $newStatus}
	
}



__END__

=head1 NAME

check_elasticsearch - Icinga/Nagios check for elasticsearch

=head1 SYNOPSIS

check_elasticsearch --node hostname [options]


=head1 OPTIONS

The only required option is --node to check for cluster state. 

Options that take ranges are in the format of warning:critical. If no range is given a critical state will be raised. 

=over 8

=item B<--node> 
Node running elasticsearch api (required).

=item B<--https>
Use https (default is http).

=item B<--port>
Elasticsearch http port (default 9200).

=item B<--user>
Username to use for http authentication.

=item B<--pass>
Password to use for http authentication.

=item B<--minn>
Minimum nodes. This takes a range or single value.

=item B<--mindn>
Minimum data nodes. This takes a range or single value.

=item B<--minndn>
Minimum non data nodes. This takes a range or single value.

=item B<--minas>
Minimum active shards. This takes a range or single value.

=item B<--minaps>
Minimum active primary shards. This takes a range or single value.

=item B<--maxus>
Maximum unassigned shards. This takes a range or single value.

=item B<--maxis>
Maximum initializing shards. This takes a range or single value.
	 
=item B<-h, --help>
Print a brief help message and exits.

=item B<--man>
Print the manual page.

=back

=head1 DESCRIPTION

B<This program> is a elasticsearch check for nagios and icinga. By default it only checks for the cluster state.

=head1 CHANGELOG

B<1.0> 9-8-2013 Initial release

=cut

